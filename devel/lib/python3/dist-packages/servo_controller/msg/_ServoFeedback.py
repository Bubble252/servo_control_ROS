# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from servo_controller/ServoFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServoFeedback(genpy.Message):
  _md5sum = "1a521aa655c317a35ffe9a7574584938"
  _type = "servo_controller/ServoFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
float32 pos
float32 speed
float32 current
float32 load
float32 voltage
float32 temper
bool move
bool success

"""
  __slots__ = ['id','pos','speed','current','load','voltage','temper','move','success']
  _slot_types = ['int32','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pos,speed,current,load,voltage,temper,move,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServoFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pos is None:
        self.pos = 0.
      if self.speed is None:
        self.speed = 0.
      if self.current is None:
        self.current = 0.
      if self.load is None:
        self.load = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.temper is None:
        self.temper = 0.
      if self.move is None:
        self.move = False
      if self.success is None:
        self.success = False
    else:
      self.id = 0
      self.pos = 0.
      self.speed = 0.
      self.current = 0.
      self.load = 0.
      self.voltage = 0.
      self.temper = 0.
      self.move = False
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6f2B().pack(_x.id, _x.pos, _x.speed, _x.current, _x.load, _x.voltage, _x.temper, _x.move, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.id, _x.pos, _x.speed, _x.current, _x.load, _x.voltage, _x.temper, _x.move, _x.success,) = _get_struct_i6f2B().unpack(str[start:end])
      self.move = bool(self.move)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6f2B().pack(_x.id, _x.pos, _x.speed, _x.current, _x.load, _x.voltage, _x.temper, _x.move, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.id, _x.pos, _x.speed, _x.current, _x.load, _x.voltage, _x.temper, _x.move, _x.success,) = _get_struct_i6f2B().unpack(str[start:end])
      self.move = bool(self.move)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i6f2B = None
def _get_struct_i6f2B():
    global _struct_i6f2B
    if _struct_i6f2B is None:
        _struct_i6f2B = struct.Struct("<i6f2B")
    return _struct_i6f2B
