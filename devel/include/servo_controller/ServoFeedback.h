// Generated by gencpp from file servo_controller/ServoFeedback.msg
// DO NOT EDIT!


#ifndef SERVO_CONTROLLER_MESSAGE_SERVOFEEDBACK_H
#define SERVO_CONTROLLER_MESSAGE_SERVOFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_controller
{
template <class ContainerAllocator>
struct ServoFeedback_
{
  typedef ServoFeedback_<ContainerAllocator> Type;

  ServoFeedback_()
    : id(0)
    , pos(0.0)
    , speed(0.0)
    , current(0.0)
    , load(0.0)
    , voltage(0.0)
    , temper(0.0)
    , move(false)
    , success(false)  {
    }
  ServoFeedback_(const ContainerAllocator& _alloc)
    : id(0)
    , pos(0.0)
    , speed(0.0)
    , current(0.0)
    , load(0.0)
    , voltage(0.0)
    , temper(0.0)
    , move(false)
    , success(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _pos_type;
  _pos_type pos;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _current_type;
  _current_type current;

   typedef float _load_type;
  _load_type load;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _temper_type;
  _temper_type temper;

   typedef uint8_t _move_type;
  _move_type move;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::servo_controller::ServoFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_controller::ServoFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ServoFeedback_

typedef ::servo_controller::ServoFeedback_<std::allocator<void> > ServoFeedback;

typedef boost::shared_ptr< ::servo_controller::ServoFeedback > ServoFeedbackPtr;
typedef boost::shared_ptr< ::servo_controller::ServoFeedback const> ServoFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_controller::ServoFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_controller::ServoFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servo_controller::ServoFeedback_<ContainerAllocator1> & lhs, const ::servo_controller::ServoFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos == rhs.pos &&
    lhs.speed == rhs.speed &&
    lhs.current == rhs.current &&
    lhs.load == rhs.load &&
    lhs.voltage == rhs.voltage &&
    lhs.temper == rhs.temper &&
    lhs.move == rhs.move &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servo_controller::ServoFeedback_<ContainerAllocator1> & lhs, const ::servo_controller::ServoFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servo_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::servo_controller::ServoFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_controller::ServoFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_controller::ServoFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_controller::ServoFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_controller::ServoFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_controller::ServoFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_controller::ServoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a521aa655c317a35ffe9a7574584938";
  }

  static const char* value(const ::servo_controller::ServoFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a521aa655c317a3ULL;
  static const uint64_t static_value2 = 0x5ffe9a7574584938ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_controller::ServoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_controller/ServoFeedback";
  }

  static const char* value(const ::servo_controller::ServoFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_controller::ServoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float32 pos\n"
"float32 speed\n"
"float32 current\n"
"float32 load\n"
"float32 voltage\n"
"float32 temper\n"
"bool move\n"
"bool success\n"
"\n"
;
  }

  static const char* value(const ::servo_controller::ServoFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_controller::ServoFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.speed);
      stream.next(m.current);
      stream.next(m.load);
      stream.next(m.voltage);
      stream.next(m.temper);
      stream.next(m.move);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_controller::ServoFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_controller::ServoFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "load: ";
    Printer<float>::stream(s, indent + "  ", v.load);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "temper: ";
    Printer<float>::stream(s, indent + "  ", v.temper);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CONTROLLER_MESSAGE_SERVOFEEDBACK_H
